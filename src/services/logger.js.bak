// src/services/logger.js
import { appendFile } from "fs/promises";

const LEVELS = { debug: 10, info: 20, warn: 30, error: 40 };
const DEFAULT_LEVEL = process.env.LOG_LEVEL?.toLowerCase() || "info";
const JSON_OUTPUT = (process.env.LOG_JSON || "0") === "1";
const LOG_FILE = process.env.LOG_FILE || null;

/**
 * createLogger(name) -> returns logger with methods: debug/info/warn/error
 * - name: module name (e.g. "MAR")
 */
export default function createLogger(name = "app") {
  const levelName = (process.env.LOG_LEVEL || DEFAULT_LEVEL).toLowerCase();
  const minLevel = LEVELS[levelName] ?? LEVELS.info;

  function formatMessage(level, msg, meta) {
    const ts = new Date().toISOString();
    if (JSON_OUTPUT) {
      const payload = {
        ts,
        level,
        pid: process.pid,
        module: name,
        msg,
        meta: meta || null,
      };
      return JSON.stringify(payload);
    }
    // human readable
    const metaStr = meta ? ` | ${safeStringify(meta)}` : "";
    return `${ts} | ${level.toUpperCase()} | pid=${process.pid} | ${name} | ${msg}${metaStr}`;
  }

  async function writeOut(str) {
    // console always prints as well
    console.log(str);
    if (LOG_FILE) {
      try {
        await appendFile(LOG_FILE, str + "\n", "utf8");
      } catch (e) {
        // don't throw from logger â€” just print error to console
        console.error(new Date().toISOString(), "LOGGER: write file failed", e?.message || e);
      }
    }
  }

  function shouldLog(level) {
    return (LEVELS[level] ?? 0) >= minLevel;
  }

  function safeStringify(obj) {
    try {
      return typeof obj === "string" ? obj : JSON.stringify(obj);
    } catch (e) {
      return String(obj);
    }
  }

  return {
    debug: (msg, meta) => {
      if (!shouldLog("debug")) return;
      writeOut(formatMessage("debug", String(msg), meta));
    },
    info: (msg, meta) => {
      if (!shouldLog("info")) return;
      writeOut(formatMessage("info", String(msg), meta));
    },
    warn: (msg, meta) => {
      if (!shouldLog("warn")) return;
      writeOut(formatMessage("warn", String(msg), meta));
    },
    error: (msg, meta) => {
      if (!shouldLog("error")) return;
      writeOut(formatMessage("error", String(msg), meta));
    },
    // helper to create child logger with module suffix
    child: (childName) => createLogger(`${name}:${childName}`),
  };
}
